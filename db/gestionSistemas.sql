/******************************************************************************/
/***       Generated by IBExpert 2012.02.21 18/11/2015 10:00:53 a.m.        ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES ASCII;

SET CLIENTLIB 'C:\Windows\System32\FBCLIENT.DLL';

CREATE DATABASE '127.0.0.1:C:\delphi\xe8-gestion-sistemas\db\GESTION_SISTEMAS.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET ASCII COLLATION ASCII;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN "BLOB-TO-VARCHAR" AS
VARCHAR(1000);



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE SP_ACTUALIZAR_PROYECTO (
    P_PROYECTO VARCHAR(30),
    P_ESTADO_SOFT VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ALTA_ESTADO (
    P_ESTADO_SOFT VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ALTA_PEDIDO (
    P_NOMBRE_PEDIDO VARCHAR(50),
    P_USUARIO_SOLICITUD VARCHAR(20),
    P_DESCRIPCION VARCHAR(1000))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ALTA_PERSONA (
    P_APELLIDO VARCHAR(30),
    P_NOMBRE VARCHAR(30),
    P_ROL VARCHAR(20),
    P_CONTACTO VARCHAR(100),
    P_USUARIO VARCHAR(20),
    P_CONTRASENA VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ALTA_PROYECTO (
    P_USUARIO VARCHAR(20),
    P_ESTADO_SOFT VARCHAR(20),
    P_NOMBRE VARCHAR(30),
    P_DESCRIPCION VARCHAR(1000),
    P_FECHA_INICIO DATE)
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ALTA_ROL (
    P_ROL VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ALTA_VERSION_PROY (
    P_PROYECTO VARCHAR(30),
    P_VERSION_MAYOR INTEGER,
    P_VERSION_MENOR INTEGER,
    P_USUARIO VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_ATENDER_PEDIDO (
    P_USUARIO VARCHAR(20),
    P_ID_PEDIDO INTEGER)
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_BAJA_PEDIDO (
    P_PEDIDO VARCHAR(30))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_BAJA_PROYECTO (
    P_PROYECTO VARCHAR(30))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_MODIF_CONTRASENA (
    P_USUARIO VARCHAR(20),
    P_CONTRASENA VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SP_MODIF_ROL (
    P_USUARIO VARCHAR(20),
    P_ROL VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ESTADO_SOFT (
    ID           INTEGER NOT NULL,
    ESTADO_SOFT  VARCHAR(20) NOT NULL
);

CREATE TABLE PEDIDO (
    ID                INTEGER NOT NULL,
    ID_PERSONA_SOLIC  INTEGER NOT NULL,
    ID_PERSONA_RECEP  INTEGER,
    ID_PROYECTO       INTEGER,
    NOMBRE            VARCHAR(50) NOT NULL,
    FECHA_SOLICITUD   DATE NOT NULL,
    FECHA_RECEPCION   DATE,
    DESCRIPCION       "BLOB-TO-VARCHAR" NOT NULL
);

CREATE TABLE PERSONA (
    ID          INTEGER NOT NULL,
    ID_ROL      INTEGER NOT NULL,
    APELLIDO    VARCHAR(30) NOT NULL,
    NOMBRE      VARCHAR(30) NOT NULL,
    CONTACTO    VARCHAR(100),
    USUARIO     VARCHAR(20),
    CONTRASENA  VARCHAR(20)
);

CREATE TABLE PROYECTO (
    ID                   INTEGER NOT NULL,
    ID_PERSONA           INTEGER NOT NULL,
    ID_ESTADO_SOFT       INTEGER NOT NULL,
    NOMBRE               VARCHAR(30) NOT NULL,
    DESCRIPCION          "BLOB-TO-VARCHAR",
    FECHA_INICIO         DATE NOT NULL,
    FECHA_ACTUALIZACION  DATE
);

CREATE TABLE ROL (
    ID   INTEGER NOT NULL,
    ROL  VARCHAR(20) NOT NULL
);

CREATE TABLE VERSION_PROY (
    ID                   INTEGER NOT NULL,
    ID_PROYECTO          INTEGER NOT NULL,
    ID_PERSONA           INTEGER NOT NULL,
    VERSION_MAYOR        INTEGER NOT NULL,
    VERSION_MENOR        INTEGER,
    FECHA_ACTUALIZACION  DATE NOT NULL
);



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE ESTADO_SOFT ADD CONSTRAINT PK_ESTADO_SOFT PRIMARY KEY (ID);
ALTER TABLE PEDIDO ADD CONSTRAINT PK_PEDIDO PRIMARY KEY (ID);
ALTER TABLE PERSONA ADD CONSTRAINT PK_PERSONA PRIMARY KEY (ID);
ALTER TABLE PROYECTO ADD CONSTRAINT PK_PROYECTO PRIMARY KEY (ID);
ALTER TABLE ROL ADD CONSTRAINT PK_ROL PRIMARY KEY (ID);
ALTER TABLE VERSION_PROY ADD CONSTRAINT PK_VERSION_PROY PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO_1 FOREIGN KEY (ID_PERSONA_SOLIC) REFERENCES PERSONA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO_2 FOREIGN KEY (ID_PERSONA_RECEP) REFERENCES PERSONA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO_3 FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PERSONA ADD CONSTRAINT FK_PERSONA_1 FOREIGN KEY (ID_ROL) REFERENCES ROL (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROYECTO ADD CONSTRAINT FK_PROYECTO_1 FOREIGN KEY (ID_PERSONA) REFERENCES PERSONA (ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PROYECTO ADD CONSTRAINT FK_PROYECTO_2 FOREIGN KEY (ID_ESTADO_SOFT) REFERENCES ESTADO_SOFT (ID) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE SP_ACTUALIZAR_PROYECTO (
    P_PROYECTO VARCHAR(30),
    P_ESTADO_SOFT VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_FECHA date;
declare variable P_ID integer;
declare variable P_ID_ESTADO_SOFT integer;
begin
  p_bandera = 'S';
  if (p_proyecto is null or (p_proyecto = '') ) then
  begin
    p_mensaje = 'Debe ingresar el proyecto a actualizar.';
    p_bandera = 'N';
  end
  else
  begin
    p_id = (select proyecto.id from proyecto where proyecto.nombre = :p_proyecto);
    if (p_id is null or (p_id = 0) ) then
    begin
        p_mensaje = 'Proyecto erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_estado_soft is null or (p_estado_soft = '') ) then
  begin
    p_mensaje = 'Debe ingresar el estado del proyecto.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_estado_soft = (select estado_soft.id from estado_soft
        where estado_soft.estado_soft = :p_estado_soft);
    if (p_id_estado_soft is null or (p_id_estado_soft = 0) ) then
    begin
        p_mensaje = 'Estado de software erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_bandera = 'S') then
  begin
    p_fecha = (select current_date from rdb$database);
    update proyecto set proyecto.id_estado_soft = :p_id_estado_soft,
        proyecto.fecha_actualizacion = :p_fecha where proyecto.id = :p_id;
    p_mensaje = 'Proyecto "'|| p_proyecto ||'" actualizado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ALTA_ESTADO (
    P_ESTADO_SOFT VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
begin
  p_bandera = 'S';
  /* Verifico los parametros. */
  if (:p_estado_soft is null or (:p_estado_soft = '') ) then
  begin
    p_bandera = 'N';
    p_mensaje = 'Debe ingresar el estado que desea crear.';
  end
  else
  begin
    /* Calculo el ID y agrego el registro. */
    p_id = 1 + (select coalesce(max(estado_soft.id),0) from estado_soft);
    insert into estado_soft values (:p_id, :p_estado_soft);
    p_mensaje = 'Estado "' || :p_estado_soft || '" agregado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ALTA_PEDIDO (
    P_NOMBRE_PEDIDO VARCHAR(50),
    P_USUARIO_SOLICITUD VARCHAR(20),
    P_DESCRIPCION VARCHAR(1000))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
declare variable P_ID_PERSONA_SOLIC integer;
declare variable P_FECHA_SOLICITUD date;
begin
  p_bandera = 'S';

  /* Verifico los parametros. */
  if (:p_nombre_pedido is null or (:p_nombre_pedido = '') ) then
  begin
    p_mensaje = 'Debe ingresar el nombre que desea darle al pedido';
    p_bandera = 'N';
  end

  if (:p_usuario_solicitud is null or (:p_usuario_solicitud = '') ) then
  begin
    p_mensaje = 'El pedido debe ser generado por una persona.';
    p_bandera = 'N';
  end
  else
  begin
    /* Veo si existe el ID_PERSONA y lo guardo. */
    p_id_persona_solic = (select persona.id from persona
        where (persona.usuario = :p_usuario_solicitud));
    if (:p_id_persona_solic is null or (:p_id_persona_solic = 0) ) then
    begin
      p_mensaje = 'Usuario erroneo o inexistente.';
      p_bandera = 'N';
    end
  end

  if (:p_descripcion is null or (:p_descripcion = '') ) then
  begin
    p_mensaje = 'Debe ingresar la descripcion del pedido.';
    p_bandera = 'N';
  end

  if (:p_bandera = 'S') then
  begin
    /* Calculo el ID y agrego el registro. */
    p_id = 1 + (select coalesce(max(pedido.id),0) from pedido);

    p_fecha_solicitud = (select current_date from rdb$database);

    insert into pedido (pedido.id, pedido.id_persona_solic, pedido.nombre,
        pedido.fecha_solicitud, pedido.descripcion) values (:p_id,
        :p_id_persona_solic, :p_nombre_pedido, :p_fecha_solicitud,
        :p_descripcion);

    p_mensaje = 'Pedido registrado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ALTA_PERSONA (
    P_APELLIDO VARCHAR(30),
    P_NOMBRE VARCHAR(30),
    P_ROL VARCHAR(20),
    P_CONTACTO VARCHAR(100),
    P_USUARIO VARCHAR(20),
    P_CONTRASENA VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
declare variable P_ID_ROL integer;
begin
  p_bandera = 'S';

  /* Verifico los parametros. */
  if (:p_apellido is null or (:p_apellido = '') ) then
  begin
    p_mensaje = 'Debe ingresar el apellido de la persona.';
    p_bandera = 'N';
  end

  if (:p_nombre is null or (:p_nombre = '') ) then
  begin
    p_mensaje = 'Debe ingresar el nombre de la persona.';
    p_bandera = 'N';
  end

  if (:p_rol is null or (:p_rol = '') ) then
  begin
    p_mensaje = 'Debe ingresar el rol de la persona.';
    p_bandera = 'N';
  end
  else
  begin
    /* Veo si existe el ID_ROL y lo guardo. */
    p_id_rol = (select rol.id from rol where (rol.rol = :p_rol));
    if (:p_id_rol is null or (:p_id_rol = 0) ) then
    begin
      p_mensaje = 'Rol no valido o inexistente.';
      p_bandera = 'N';
    end
  end

  if (:p_usuario is null or (:p_usuario = '') ) then
  begin
    p_mensaje = 'Debe ingresar el nombre de usuario.';
    p_bandera = 'N';
  end
  else
  begin
    if (exists (select * from persona where persona.usuario = :p_usuario)) then
    begin
        p_mensaje = 'Ya existe el nombre de usuario seleccionado.';
        p_bandera = 'N';
    end
  end

  if (:p_contrasena is null or (:p_contrasena = '') ) then
  begin
    p_mensaje = 'La contrasena no puede estar vacia.';
    p_bandera = 'N';
  end

  if (:p_bandera = 'S') then
  begin
    /* Calculo el ID y agrego el registro. */
    p_id = 1 + (select coalesce(max(persona.id),0) from persona);
    insert into persona (persona.id, persona.id_rol, persona.apellido,
        persona.nombre, persona.usuario, persona.contrasena)
        values (:p_id, :p_id_rol, :p_apellido, :p_nombre, :p_usuario, :p_contrasena);

    if (:p_contacto is not null or (:p_contacto <> '') )
    then update persona set persona.contacto = :p_contacto
            where persona.id = :p_id;

    p_mensaje = '"' || :p_apellido || ', ' || :p_nombre || '" agregado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ALTA_PROYECTO (
    P_USUARIO VARCHAR(20),
    P_ESTADO_SOFT VARCHAR(20),
    P_NOMBRE VARCHAR(30),
    P_DESCRIPCION VARCHAR(1000),
    P_FECHA_INICIO DATE)
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
declare variable P_ID_PERSONA integer;
declare variable P_ID_ESTADO_SOFT integer;
begin
  p_bandera = 'S';
  /* Verifico los parametros. */
  if (:p_usuario is null or (:p_usuario = '') ) then
  begin
    p_mensaje = 'Debe ingresar un usuario.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_persona = (select persona.id from persona where
        (persona.usuario = :p_usuario));
    if (:p_id_persona is null or (:p_id_persona = 0) ) then
    begin
        p_mensaje = 'Usuario gestor del proeycto erroneo o inexixtente.';
        p_bandera = 'N';
    end
  end

  if (:p_estado_soft is null or (:p_estado_soft = '') ) then
  begin
    p_mensaje = 'Debe ingresar el estado del proyecto.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_estado_soft = (select estado_soft.id from estado_soft
        where (estado_soft.estado_soft = :p_estado_soft));
    if (:p_id_estado_soft is null or (:p_id_estado_soft = 0) ) then
    begin
        p_mensaje = 'Estado erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (:p_nombre is null or (:p_nombre = '') ) then
  begin
    p_mensaje = 'Debe ingresar el nombre del proyecto.';
    p_bandera = 'N';
  end
  else
  begin
    if (exists (select * from proyecto where (proyecto.nombre = :p_nombre)))
    then
    begin
        p_mensaje = 'Ya existe un proyecto con el mismo nombre.';
        p_bandera = 'N';
    end
  end

  if (:p_descripcion is null or (:p_descripcion = '') ) then
  begin
    p_mensaje = 'Debe ingresar la descripcion del proyecto.';
    p_bandera = 'N';
  end

  if (:p_fecha_inicio is null) then
  begin
    p_mensaje = 'Debe ingresar la fecha de inicio.';
    p_bandera = 'N';
  end

  if (:p_bandera = 'S') then
  begin
    /* Calculo el ID y agrego el registro .*/
    p_id = 1 + (select coalesce(max(proyecto.id),0) from proyecto);
    insert into proyecto (proyecto.id, proyecto.id_persona, proyecto.id_estado_soft,
        proyecto.nombre, proyecto.descripcion, proyecto.fecha_inicio) values
        (:p_id, :p_id_persona, :p_id_estado_soft, :p_nombre, :p_descripcion,
        :p_fecha_inicio);

    p_mensaje = 'Proyecto "' || :p_nombre || '" registrado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ALTA_ROL (
    P_ROL VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
begin
  p_bandera = 'S';
  /* Verifico los parametros. */
  if (:p_rol is null or (:p_rol = '') ) then
  begin
    p_bandera = 'N';
    p_mensaje = 'Debe ingresar el rol que desea crear.';
  end
  else
  begin
    /* Calculo el ID y agrego el registro. */
    p_id = 1 + (select coalesce(max(rol.id),0) from rol);
    insert into rol values (:p_id, :p_rol);
    p_mensaje = 'Rol "' || :p_rol || '" agregado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ALTA_VERSION_PROY (
    P_PROYECTO VARCHAR(30),
    P_VERSION_MAYOR INTEGER,
    P_VERSION_MENOR INTEGER,
    P_USUARIO VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
declare variable P_ID_PROYECTO integer;
declare variable P_ID_PERSONA integer;
declare variable P_FECHA date;
begin
  p_bandera = 'S';
  /* Verifico los parametros. */
  if (p_proyecto is null or (p_proyecto = '') ) then
  begin
    p_mensaje = 'Debe ingresar el proyecto.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_proyecto = (select proyecto.id from proyecto
        where (proyecto.nombre = :p_proyecto));
    if (p_id_proyecto is null or (p_id_proyecto = 0) ) then
    begin
        p_mensaje = 'Proyecto erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_usuario is null or (p_usuario = '') ) then
  begin
    p_mensaje = 'Debe ingresar el usuario de quien actualiza la version.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_persona = (select persona.id from persona where persona.usuario = :p_usuario);
    if (p_id_persona is null or (p_id_persona = 0) ) then
    begin
        p_mensaje = 'Usuario erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_version_mayor is null) then
  begin
    p_mensaje = 'Debe ingresar la version mayor del proyecto.  Puede ser 0.';
    p_bandera = 'N';
  end

  if (:p_bandera = 'S') then
  begin
    /* Calculo el ID y agrego el registro. */
    p_fecha = (select current_date from rdb$database);
    p_id = 1 + (select coalesce(max(version_proy.id),0) from version_proy);
    insert into version_proy (version_proy.id, version_proy.id_proyecto, version_proy.id_persona,
        version_proy.version_mayor, version_proy.fecha_actualizacion) values
        (:p_id, :p_id_proyecto, :p_id_persona, :p_version_mayor, :p_fecha);

    if (p_version_menor is not null) then
    begin
        update version_proy set version_proy.version_menor = :p_version_menor
            where version_proy.id = :p_id;
    end

    p_mensaje = 'Version del proyecto "' || p_proyecto || '" actualizada correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_ATENDER_PEDIDO (
    P_USUARIO VARCHAR(20),
    P_ID_PEDIDO INTEGER)
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID_PERSONA_RECEP integer;
declare variable P_FECHA_RECEPCION date;
begin
  p_bandera = 'S';
  /* Verifico los parametrso */
  if (p_usuario is null or (p_usuario = '') ) then
  begin
    p_mensaje = 'Debe ingresar el usuario que toma el pedido.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_persona_recep = (select persona.id from persona
        where persona.usuario = :p_usuario);
    if (p_id_persona_recep is null or (p_id_persona_recep = 0) ) then
    begin
        p_mensaje = 'Usuario incorrecto o inexistente.';
        p_bandera = 'N';
    end
  end
  if (p_id_pedido is null or (p_id_pedido = 0) ) then
  begin
    p_mensaje = 'Debe seleccionar el pedido a atender.';
    p_bandera = 'N';
  end

  if (p_bandera = 'S') then
  begin
    p_fecha_recepcion = (select current_date from rdb$database);
    update pedido set pedido.id_persona_recep = :p_id_persona_recep,
        pedido.fecha_recepcion = :p_fecha_recepcion where pedido.id = :p_id_pedido;
    p_mensaje = 'Pedido atendido correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_BAJA_PEDIDO (
    P_PEDIDO VARCHAR(30))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
begin
  p_bandera = 'S';
  if (p_pedido is null or (p_pedido = '') ) then
  begin
    p_mensaje = 'Debe seleccionar el pedido.';
    p_bandera = 'N';
  end
  else
  begin
    p_id = (select pedido.id from pedido where pedido.nombre = :p_pedido);
    if (p_id is null or (p_id = 0) ) then
    begin
        p_mensaje = 'Pedido erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_bandera = 'S') then
  begin
    delete from pedido where pedido.id = :p_id;
    p_mensaje = 'Pedido "'|| p_pedido ||'" eliminado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_BAJA_PROYECTO (
    P_PROYECTO VARCHAR(30))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
begin
  p_bandera = 'S';
  if (p_proyecto is null or (p_proyecto = '') ) then
  begin
    p_mensaje = 'Debe seleccionar el proyecto.';
    p_bandera = 'N';
  end
  else
  begin
    p_id = (select proyecto.id from proyecto where proyecto.nombre = :p_proyecto);
    if (p_id is null or (p_id = 0) ) then
    begin
        p_mensaje = 'Proyecto erroneo o inexistente.';
        p_bandera = 'N';
    end
  end
  if (p_bandera = 'S') then
  begin
    delete from version_proy where version_proy.id_proyecto = :p_id;
    delete from proyecto where proyecto.id = :p_id;
    p_mensaje = 'Proyecto "'|| p_proyecto ||'" eliminado correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_MODIF_CONTRASENA (
    P_USUARIO VARCHAR(20),
    P_CONTRASENA VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID integer;
begin
  p_bandera = 'S';

  if (p_usuario is null or (p_usuario = '') ) then
  begin
    p_mensaje = 'Debe ingresar el usuario a modificar.';
    p_bandera = 'N';
  end
  else
  begin
    p_id = (select persona.id from persona
        where persona.usuario = :p_usuario);
    if (p_id is null or (p_id = 0) ) then
    begin
        p_mensaje = 'Usuario erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_contrasena is null or (p_contrasena = '') ) then
  begin
    p_mensaje = 'La contrasena no puede estar vacia.';
    p_bandera = 'N';
  end

  if (p_bandera = 'S') then
  begin
    update persona set persona.contrasena = :p_contrasena
        where persona.id = :p_id;
    p_mensaje = 'Contrasena actualizada correctamente.';
  end
  suspend;
end^


ALTER PROCEDURE SP_MODIF_ROL (
    P_USUARIO VARCHAR(20),
    P_ROL VARCHAR(20))
RETURNS (
    P_MENSAJE VARCHAR(100),
    P_BANDERA CHAR(1))
AS
declare variable P_ID_PERSONA integer;
declare variable P_ID_ROL integer;
begin
  p_bandera = 'S';

  if (p_usuario is null or (p_usuario = '') ) then
  begin
    p_mensaje = 'Debe ingresar el usuario a modificar.';
    p_bandera = 'N';
  end
  begin
    p_id_persona = (select persona.id from persona
        where persona.usuario = :p_usuario);
    if (p_id_persona is null or (p_id_persona = 0) ) then
    begin
        p_mensaje = 'Usuario erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_rol is null or (p_rol = '') ) then
  begin
    p_mensaje = 'Debe ingresar el nuevo rol.';
    p_bandera = 'N';
  end
  else
  begin
    p_id_rol = (select rol.id from rol where rol.rol = :p_rol);
    if (p_id_rol is null or (p_id_rol = 0) ) then
    begin
        p_mensaje = 'Rol erroneo o inexistente.';
        p_bandera = 'N';
    end
  end

  if (p_bandera = 'S') then
  begin
    update persona set persona.id_rol = :p_id_rol
        where persona.id = :p_id_persona;
    p_mensaje = 'Rol modificado correctamente.';
  end
  suspend;
end^



SET TERM ; ^
